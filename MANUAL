####################################################################################################
+ Basic Tensor Algebra Subroutines in C/C++ (BTAS) Quick Reference              N. Nakatani, wrote  
####################################################################################################

####################################################################################################
+ Compilation
----------------------------------------------------------------------------------------------------
  To use BTAS, following libraries are required
  blitz++ library (http://sourceforge.net/projects/blitz/) and
  boost   library (http://www.boost.org/)
  MKL     library
----------------------------------------------------------------------------------------------------
+ Build libbtas.a

  cd $BTAS_ROOT/lib/
  make

+ Build your code with BTAS library (with MKL library)

  g++ -O2 -fopnemp -I$BTAS_ROOT/include $BTAS_ROOT/lib/libbtas.a -lblitz -lboost_serialization
      -lmkl_core -lmkl_intel_lp64 -lmkl_sequential

- For coding, $BTAS_ROOT/lib/test.C involves helpful example to use BTAS
- If '-D_PRINT_WARNINGS' is specified, turns to print warning
  when SDArray::reserve or SDArray::insert is called with prohibited (quantum number) block
  it is recommended to use this option to avoid undesirable behavior upon reservation and insertion
####################################################################################################

####################################################################################################
+ Following blitz feature can be used within 'namespace btas' specified in btas/btas_defs.h
----------------------------------------------------------------------------------------------------
  blitz::Array
  blitz::TinyVector
  blitz::RectDomain
  blitz::Range
  blitz::shape
  blitz::dot
####################################################################################################
  Dshapes -- alias to 'std::vector<int>' used to describe dense array shapes in SDArray
  Qshapes -- alias to 'std::vector<Quantum>' used to describe quantum number indices in QSDArray
####################################################################################################
+ To use QSDArray feature, 'class Quantum' must be defined by your own
- it must have static member function 'Quantum::zero()' which returns zero-quantum number,
  operators ==, !=, <, *, +, -, << are overloaded, and 'bool parity()' which returns true
  if particle # is odd
- Note: (member)     Quantum operator* (const Quantum& other) gives 'q =  q1 + q2'
- Note: (non-member) Quantum operator+ (const Quantum& other) gives 'q = +q1'
- Note: (non-member) Quantum operator- (const Quantum& other) gives 'q = -q1'
####################################################################################################

####################################################################################################
  DArray
----------------------------------------------------------------------------------------------------
+ Double prec. Array, derived from blitz::Array<double, N>
- purpose to define such derived class is to implement copy constructor and copy assignment operator
  which are not working safe in blitz's original one.
- formatted print function overloaded operator<< is also implemented.
- all members of blitz::Array<double, N> can work with DArray<N> (probably...)
####################################################################################################

#include <btas/DArray.h>
template<int N> class DArray

####################################################################################################
  SDArray
----------------------------------------------------------------------------------------------------
+ Block-Sparse Double prec. Array
- public member 'DataType' is alias to 'std::map<int, shared_ptr<DArray<N> > >'
  shared_ptr can be defined as 'boost::shared_ptr' or 'std::shared_ptr' (C++11)
####################################################################################################

#include <btas/SDArray.h>
template<int N> class SDArray

(constructor)

 1. SDArray(const TinyVector<int, N>& block_shape)
    -- construct by block-shape

 2. SDArray(const TinyVector<Dshapes, N>& dense_shapes)
    -- construct by dense shapes for eash rank

 3. SDArray(const TinyVector<Dshapes, N>& dense_shapes, const double& value)
    -- 2. initialized by constant number

 4. SDArray(const TinyVector<Dshapes, N>& dense_shapes, const function<double()>& f_random)
    -- 2. initialized by random number

(member functions)
 void clear()
    -- deallocate storage

 void copy(const SDArray& other)
    -- deep copy
   
 void reference(const SDArray& other)
    -- shallow copy

 void resize(...)
    -- same as constructors

 TinyVector<int, N> index(int block_tag) const
    -- get block-index from stored tag

 int tag(const TinyVector<int, N>& block_index) const
    -- get stored tag from block-index

 const TinyVector<int, N>& shape() const
    -- return block-shape

 const int& shape(int i) const
    -- return block-shape at i-th rank

 const TinyVector<int, N>& stride() const
    -- return stride of sparse-block

 const int& stride(int i) const
    -- return stride of sparse-block at i-th rank

 size_t size() const
    -- return number of non-zero blocks

 size_t size_total() const
    -- return number of total blocks

 TinyVector<Dshapes, N> dshape() const
    -- return dense-shapes

 Dshapes dshape(int i) const
    -- return dense_shapes at i-th rank

 iterator begin()

 iterator end()

 iterator find(int block_tag)
 iterator find(const TinyVector<int, N>& block_index)

 iterator lower_bound(int block_tag)
 iterator lower_bound(const TinyVector<int, N>& block_index)

 iterator upper_bound(int block_tag)
 iterator upper_bound(const TinyVector<int, N>& block_index)
    -- work as std::map

 bool allowed(int block_tag) const
 bool allowed(const TinyVector<int, N>& block_index) const
    -- return requested block is non-zero or not

 iterator reserve(int block_tag)
 iterator reserve(const TinyVector<int, N>& block_index)
    -- allocate requested block and return its iterator position
    -- if it's not allowed, return end()

 iterator insert(int block_tag, const DArray<N>& block)
 iterator insert(const TinyVector<int, N>& block_index, const DArray<N>& block)
    -- insert dense array into requested block
    -- if data already exists, block is added to it

####################################################################################################
  QSDArray
----------------------------------------------------------------------------------------------------
+ Quantum Number-Based Block-Sparse Double prec. Array derived from SDArray
+ sparse block is only non-zero when
  q_total = sum_{i} q_shape[i][block_index[i]]
####################################################################################################

#include <btas/QSDArray.h>
template<int N> class QSDArray

(constructor)

 1. SDArray(const Quantum& q_total, const TinyVector<Qshapes, N>& q_shape)
    -- construct by quantum number objects

 2. SDArray(const Quantum& q_total, const TinyVector<Qshapes, N>& q_shape,
                                    const TinyVector<Dshapes, N>& d_shape)
    -- construct by dense shapes for eash rank

 3. SDArray(const Quantum& q_total, const TinyVector<Qshapes, N>& q_shape,
                                    const TinyVector<Dshapes, N>& d_shape, const double& value)
    -- 2. initialized by constant number

 4. SDArray(const Quantum& q_total, const TinyVector<Qshapes, N>& q_shape,
                                    const TinyVector<Dshapes, N>& d_shape, const function<double()>& f_random)
    -- 2. initialized by random number

(member functions +)

 const Quantum& q() const
    -- return total quantum number

 const TinyVector<Qshapes, N>& qshape() const
    -- return quantum number indices

 const Qshapes& qshape(int i) const
    -- return quantum number index at i-th rank

 void parity(const std::vector<int>& indices)
    -- for each non-zero block, scale (-1) if q = sum_{i} q_index[indices[i]] is odd

 void parity(const std::vector<int>& indices1, const std::vector<int>& indices2)
    -- for each non-zero block, scale (-1) if both q_index[indices1[i]] and q_index[indices2[i]] are odd

 void conjugateRef(const QSDArray& other)
    -- shallow copy with conjugated quantum numbers { q() = -q() and qshape() = -qshape() }

 QSDArray conjugate() const
    -- return conjugated reference

 QSDArray conjugateSelf()
    -- do conjugation itself

####################################################################################################

####################################################################################################
  BLAS-like subroutines
####################################################################################################
+ array data is stored in ROW-MAJOR array
+ instead of characters 'N', 'T', and 'C', enumerations of 'NoTrans', 'Trans', and 'ConjTrans' are
  used inside btas namespace
- NOTE that 'Trans' and 'ConjTrans' have different meaning in QSDArray contraction
  since QSDArray has quantum numbers, conjugation means an interchange of bra and ket states
  this feature prohibits bra-bra contraction or ket-ket contraction
####################################################################################################

#include <btas/Dblas.h>
Dcopy
Dscal
Daxpy
Ddot
Dgemv
Dger
Dgemm

#include <btas/SDblas.h>
SDcopy
SDscal
SDaxpy
SDdot
SDgemv
SDger
SDgemm

#include <btas/QSDblas.h>
QSDcopy
QSDscal
QSDaxpy
QSDdotu
QSDdotc
QSDgemv
QSDger
QSDgemm

####################################################################################################
  LAPACK-like drivers
####################################################################################################

#include <btas/Dlapack.h>
Dgesv
Dsyev
Dsygv
Dgesvd

#include <btas/QSDlapack.h>
QSDgesvd

####################################################################################################
  QSXmergeInfo
----------------------------------------------------------------------------------------------------
+ QSXmergeInfo has a info about merge/expand tensor ranks using quantum numbers
####################################################################################################
  QSDmerge
  QSDexpand
----------------------------------------------------------------------------------------------------
+ QSDmerge provides function to merge tensor ranks
+ QSDexpand provides function to expand merged rank to original tensor ranks
####################################################################################################

####################################################################################################
+ Convenient Driver Routines
----------------------------------------------------------------------------------------------------
  [Q,S,D]: DArray, SDArray, and QSDArray are supported
  [Q,D]  : DArray,          and QSDArray are supported
----------------------------------------------------------------------------------------------------

#include <contract.h>

//
// cf) calling by a(i,j,k,l) with index [1,3] and b(p,q,r,s) with index[2,1]
//     contracts (j,r) and (l,q) indices to result in c(i,k,p,s)
//
void contract
(double alpha, const [Q,S,D]Array<NA>& a, const TinyVector<int, NA>& a_index_contract,
               const [Q,S,D]Array<NB>& b, const TinyVector<int, NB>& b_index_contract,
 double beta,        [Q,S,D]Array<NC>& c);

//
// cf) calling by a(i,j,k,l), b(k,p,i,q), and c(q,j,l,p) contracts i and k indices
//     then resulting c'(j,l,p,q) tensor is permuted to c(q,j,l,p)
//
void indexed_contract
(double alpha, const [Q,S,D]Array<NA>& a, const TinyVector<int, NA>& a_symbols,
               const [Q,S,D]Array<NB>& b, const TinyVector<int, NB>& b_symbols,
 double beta,        [Q,S,D]Array<NC>& c, const TinyVector<int, NC>& c_symbols);

####################################################################################################
+ above functions are wrapper for following functions
####################################################################################################
  Dcontract
  Dindexed_contract
----------------------------------------------------------------------------------------------------
  SDcontract
  SDindexed_contract
----------------------------------------------------------------------------------------------------
  QSDcontract
  QSDindexed_contract
####################################################################################################

----------------------------------------------------------------------------------------------------

#include <permute.h>

//
// cf) x(i,j,k,l) with index(2,1,3,0) returns y(k,j,l,i)
//
void permute
(const [Q,S,D]Array<N>& x, const TinyVector<int, N>& index_permute,
       [Q,S,D]Array<N>& y);

//
// cf) automatically computes index_permute, call by x(i,j,k,l) and y(k,j,l,i) directly 
//
void indexed_permute
(const [Q,S,D]Array<N>& x, const TinyVector<int, N>& x_symbols,
       [Q,S,D]Array<N>& y, const TinyVector<int, N>& y_symbols);

####################################################################################################
+ above functions are wrapper for following functions
####################################################################################################
  Dpermute
  Dindexed_permute
----------------------------------------------------------------------------------------------------
  SDpermute
  SDindexed_permute
----------------------------------------------------------------------------------------------------
  QSDpermute
  QSDindexed_permute
####################################################################################################

----------------------------------------------------------------------------------------------------

#include <decompose.h>

//
// tensor factorization using SVD, returns "reference weight (w)"
// tensor 'r' scaled by 1/sqrt(w) preserve norm of factorized tensors
// cf) a(p,q,r,s) with index(0,3) factorizes it into l(q,r,x) and r(x,p,s)
//     max. dimension of x can be specified by D (=0 means all non-zero singular values are kept)
//
// NOTE: NL = NA - K + 1, NR = K + 1
//
double decompose
(const [Q,D]Array<NA>& a,
 const TinyVector<int, K>& index_decompose,
       [Q,D]Array<NL>& l,
       [Q,D]Array<NR>& r, int D = 0);

//
// indexed-wise decomposition
// cf) calling with a(p,q,r,s), l(r,x,s), and r(p,q,x)
//
// NOTE: NR = NA - NL + 2
//
double decompose
(const [Q,D]Array<NA>& a, const TinyVector<int, NA>& a_symbols,
       [Q,D]Array<NL>& l, const TinyVector<int, NL>& l_symbols,
       [Q,D]Array<NR>& r, const TinyVector<int, NR>& r_symbols, int D = 0);

