#include <btas/Dreindex.h>
using namespace btas;

template<>
void Dreindex<1>(const double* x, double* y, const TinyVector<int, 1>& xstr, const TinyVector<int, 1>& ystr, const TinyVector<int, 1>& yshape)
{
  for(int i0 = 0; i0 < yshape[0]; ++i0) {
    y[i0] = x[i0];
  }
}

template<>
void Dreindex<2>(const double* x, double* y, const TinyVector<int, 2>& xstr, const TinyVector<int, 2>& ystr, const TinyVector<int, 2>& yshape)
{
  for(int i0 = 0; i0 < yshape[0]; ++i0) {
    int j0 = i0 * xstr[0];
    int m0 = i0 * ystr[0];
    for(int i1 = 0; i1 < yshape[1]; ++i1) {
      y[m0 + i1] = x[j0 + i1 * xstr[1]];
    }
  }
}

template<>
void Dreindex<3>(const double* x, double* y, const TinyVector<int, 3>& xstr, const TinyVector<int, 3>& ystr, const TinyVector<int, 3>& yshape)
{
  for(int i0 = 0; i0 < yshape[0]; ++i0) {
    int j0 = i0 * xstr[0];
    int m0 = i0 * ystr[0];
    for(int i1 = 0; i1 < yshape[1]; ++i1) {
      int j1 = j0 + i1 * xstr[1];
      int m1 = m0 + i1 * ystr[1];
      for(int i2 = 0; i2 < yshape[2]; ++i2) {
        y[m1 + i2] = x[j1 + i2 * xstr[2]];
      }
    }
  }
}

template<>
void Dreindex<4>(const double* x, double* y, const TinyVector<int, 4>& xstr, const TinyVector<int, 4>& ystr, const TinyVector<int, 4>& yshape)
{
  for(int i0 = 0; i0 < yshape[0]; ++i0) {
    int j0 = i0 * xstr[0];
    int m0 = i0 * ystr[0];
    for(int i1 = 0; i1 < yshape[1]; ++i1) {
      int j1 = j0 + i1 * xstr[1];
      int m1 = m0 + i1 * ystr[1];
      for(int i2 = 0; i2 < yshape[2]; ++i2) {
        int j2 = j1 + i2 * xstr[2];
        int m2 = m1 + i2 * ystr[2];
        for(int i3 = 0; i3 < yshape[3]; ++i3) {
          y[m2 + i3] = x[j2 + i3 * xstr[3]];
        }
      }
    }
  }
}

template<>
void Dreindex<5>(const double* x, double* y, const TinyVector<int, 5>& xstr, const TinyVector<int, 5>& ystr, const TinyVector<int, 5>& yshape)
{
  for(int i0 = 0; i0 < yshape[0]; ++i0) {
    int j0 = i0 * xstr[0];
    int m0 = i0 * ystr[0];
    for(int i1 = 0; i1 < yshape[1]; ++i1) {
      int j1 = j0 + i1 * xstr[1];
      int m1 = m0 + i1 * ystr[1];
      for(int i2 = 0; i2 < yshape[2]; ++i2) {
        int j2 = j1 + i2 * xstr[2];
        int m2 = m1 + i2 * ystr[2];
        for(int i3 = 0; i3 < yshape[3]; ++i3) {
          int j3 = j2 + i3 * xstr[3];
          int m3 = m2 + i3 * ystr[3];
          for(int i4 = 0; i4 < yshape[4]; ++i4) {
            y[m3 + i4] = x[j3 + i4 * xstr[4]];
          }
        }
      }
    }
  }
}

template<>
void Dreindex<6>(const double* x, double* y, const TinyVector<int, 6>& xstr, const TinyVector<int, 6>& ystr, const TinyVector<int, 6>& yshape)
{
  for(int i0 = 0; i0 < yshape[0]; ++i0) {
    int j0 = i0 * xstr[0];
    int m0 = i0 * ystr[0];
    for(int i1 = 0; i1 < yshape[1]; ++i1) {
      int j1 = j0 + i1 * xstr[1];
      int m1 = m0 + i1 * ystr[1];
      for(int i2 = 0; i2 < yshape[2]; ++i2) {
        int j2 = j1 + i2 * xstr[2];
        int m2 = m1 + i2 * ystr[2];
        for(int i3 = 0; i3 < yshape[3]; ++i3) {
          int j3 = j2 + i3 * xstr[3];
          int m3 = m2 + i3 * ystr[3];
          for(int i4 = 0; i4 < yshape[4]; ++i4) {
            int j4 = j3 + i4 * xstr[4];
            int m4 = m3 + i4 * ystr[4];
            for(int i5 = 0; i5 < yshape[5]; ++i5) {
              y[m4 + i5] = x[j4 + i5 * xstr[5]];
            }
          }
        }
      }
    }
  }
}

template<>
void Dreindex<7>(const double* x, double* y, const TinyVector<int, 7>& xstr, const TinyVector<int, 7>& ystr, const TinyVector<int, 7>& yshape)
{
  for(int i0 = 0; i0 < yshape[0]; ++i0) {
    int j0 = i0 * xstr[0];
    int m0 = i0 * ystr[0];
    for(int i1 = 0; i1 < yshape[1]; ++i1) {
      int j1 = j0 + i1 * xstr[1];
      int m1 = m0 + i1 * ystr[1];
      for(int i2 = 0; i2 < yshape[2]; ++i2) {
        int j2 = j1 + i2 * xstr[2];
        int m2 = m1 + i2 * ystr[2];
        for(int i3 = 0; i3 < yshape[3]; ++i3) {
          int j3 = j2 + i3 * xstr[3];
          int m3 = m2 + i3 * ystr[3];
          for(int i4 = 0; i4 < yshape[4]; ++i4) {
            int j4 = j3 + i4 * xstr[4];
            int m4 = m3 + i4 * ystr[4];
            for(int i5 = 0; i5 < yshape[5]; ++i5) {
              int j5 = j4 + i5 * xstr[5];
              int m5 = m4 + i5 * ystr[5];
              for(int i6 = 0; i6 < yshape[6]; ++i6) {
                y[m5 + i6] = x[j5 + i6 * xstr[6]];
              }
            }
          }
        }
      }
    }
  }
}

template<>
void Dreindex<8>(const double* x, double* y, const TinyVector<int, 8>& xstr, const TinyVector<int, 8>& ystr, const TinyVector<int, 8>& yshape)
{
  for(int i0 = 0; i0 < yshape[0]; ++i0) {
    int j0 = i0 * xstr[0];
    int m0 = i0 * ystr[0];
    for(int i1 = 0; i1 < yshape[1]; ++i1) {
      int j1 = j0 + i1 * xstr[1];
      int m1 = m0 + i1 * ystr[1];
      for(int i2 = 0; i2 < yshape[2]; ++i2) {
        int j2 = j1 + i2 * xstr[2];
        int m2 = m1 + i2 * ystr[2];
        for(int i3 = 0; i3 < yshape[3]; ++i3) {
          int j3 = j2 + i3 * xstr[3];
          int m3 = m2 + i3 * ystr[3];
          for(int i4 = 0; i4 < yshape[4]; ++i4) {
            int j4 = j3 + i4 * xstr[4];
            int m4 = m3 + i4 * ystr[4];
            for(int i5 = 0; i5 < yshape[5]; ++i5) {
              int j5 = j4 + i5 * xstr[5];
              int m5 = m4 + i5 * ystr[5];
              for(int i6 = 0; i6 < yshape[6]; ++i6) {
                int j6 = j5 + i6 * xstr[6];
                int m6 = m5 + i6 * ystr[6];
                for(int i7 = 0; i7 < yshape[7]; ++i7) {
                  y[m6 + i7] = x[j6 + i7 * xstr[7]];
                }
              }
            }
          }
        }
      }
    }
  }
}

template<>
void Dreindex<9>(const double* x, double* y, const TinyVector<int, 9>& xstr, const TinyVector<int, 9>& ystr, const TinyVector<int, 9>& yshape)
{
  for(int i0 = 0; i0 < yshape[0]; ++i0) {
    int j0 = i0 * xstr[0];
    int m0 = i0 * ystr[0];
    for(int i1 = 0; i1 < yshape[1]; ++i1) {
      int j1 = j0 + i1 * xstr[1];
      int m1 = m0 + i1 * ystr[1];
      for(int i2 = 0; i2 < yshape[2]; ++i2) {
        int j2 = j1 + i2 * xstr[2];
        int m2 = m1 + i2 * ystr[2];
        for(int i3 = 0; i3 < yshape[3]; ++i3) {
          int j3 = j2 + i3 * xstr[3];
          int m3 = m2 + i3 * ystr[3];
          for(int i4 = 0; i4 < yshape[4]; ++i4) {
            int j4 = j3 + i4 * xstr[4];
            int m4 = m3 + i4 * ystr[4];
            for(int i5 = 0; i5 < yshape[5]; ++i5) {
              int j5 = j4 + i5 * xstr[5];
              int m5 = m4 + i5 * ystr[5];
              for(int i6 = 0; i6 < yshape[6]; ++i6) {
                int j6 = j5 + i6 * xstr[6];
                int m6 = m5 + i6 * ystr[6];
                for(int i7 = 0; i7 < yshape[7]; ++i7) {
                  int j7 = j6 + i7 * xstr[7];
                  int m7 = m6 + i7 * ystr[7];
                  for(int i8 = 0; i8 < yshape[8]; ++i8) {
                    y[m7 + i8] = x[j7 + i8 * xstr[8]];
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

template<>
void Dreindex<10>(const double* x, double* y, const TinyVector<int, 10>& xstr, const TinyVector<int, 10>& ystr, const TinyVector<int, 10>& yshape)
{
  for(int i0 = 0; i0 < yshape[0]; ++i0) {
    int j0 = i0 * xstr[0];
    int m0 = i0 * ystr[0];
    for(int i1 = 0; i1 < yshape[1]; ++i1) {
      int j1 = j0 + i1 * xstr[1];
      int m1 = m0 + i1 * ystr[1];
      for(int i2 = 0; i2 < yshape[2]; ++i2) {
        int j2 = j1 + i2 * xstr[2];
        int m2 = m1 + i2 * ystr[2];
        for(int i3 = 0; i3 < yshape[3]; ++i3) {
          int j3 = j2 + i3 * xstr[3];
          int m3 = m2 + i3 * ystr[3];
          for(int i4 = 0; i4 < yshape[4]; ++i4) {
            int j4 = j3 + i4 * xstr[4];
            int m4 = m3 + i4 * ystr[4];
            for(int i5 = 0; i5 < yshape[5]; ++i5) {
              int j5 = j4 + i5 * xstr[5];
              int m5 = m4 + i5 * ystr[5];
              for(int i6 = 0; i6 < yshape[6]; ++i6) {
                int j6 = j5 + i6 * xstr[6];
                int m6 = m5 + i6 * ystr[6];
                for(int i7 = 0; i7 < yshape[7]; ++i7) {
                  int j7 = j6 + i7 * xstr[7];
                  int m7 = m6 + i7 * ystr[7];
                  for(int i8 = 0; i8 < yshape[8]; ++i8) {
                    int j8 = j7 + i8 * xstr[8];
                    int m8 = m7 + i8 * ystr[8];
                    for(int i9 = 0; i9 < yshape[9]; ++i9) {
                      y[m8 + i9] = x[j8 + i9 * xstr[9]];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

template<>
void Dreindex<11>(const double* x, double* y, const TinyVector<int, 11>& xstr, const TinyVector<int, 11>& ystr, const TinyVector<int, 11>& yshape)
{
  for(int i0 = 0; i0 < yshape[0]; ++i0) {
    int j0 = i0 * xstr[0];
    int m0 = i0 * ystr[0];
    for(int i1 = 0; i1 < yshape[1]; ++i1) {
      int j1 = j0 + i1 * xstr[1];
      int m1 = m0 + i1 * ystr[1];
      for(int i2 = 0; i2 < yshape[2]; ++i2) {
        int j2 = j1 + i2 * xstr[2];
        int m2 = m1 + i2 * ystr[2];
        for(int i3 = 0; i3 < yshape[3]; ++i3) {
          int j3 = j2 + i3 * xstr[3];
          int m3 = m2 + i3 * ystr[3];
          for(int i4 = 0; i4 < yshape[4]; ++i4) {
            int j4 = j3 + i4 * xstr[4];
            int m4 = m3 + i4 * ystr[4];
            for(int i5 = 0; i5 < yshape[5]; ++i5) {
              int j5 = j4 + i5 * xstr[5];
              int m5 = m4 + i5 * ystr[5];
              for(int i6 = 0; i6 < yshape[6]; ++i6) {
                int j6 = j5 + i6 * xstr[6];
                int m6 = m5 + i6 * ystr[6];
                for(int i7 = 0; i7 < yshape[7]; ++i7) {
                  int j7 = j6 + i7 * xstr[7];
                  int m7 = m6 + i7 * ystr[7];
                  for(int i8 = 0; i8 < yshape[8]; ++i8) {
                    int j8 = j7 + i8 * xstr[8];
                    int m8 = m7 + i8 * ystr[8];
                    for(int i9 = 0; i9 < yshape[9]; ++i9) {
                      int j9 = j8 + i9 * xstr[9];
                      int m9 = m8 + i9 * ystr[9];
                      for(int i10 = 0; i10 < yshape[10]; ++i10) {
                        y[m9 + i10] = x[j9 + i10 * xstr[10]];
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

template<>
void Dreindex<12>(const double* x, double* y, const TinyVector<int, 12>& xstr, const TinyVector<int,  12 >& ystr, const TinyVector<int,  12 >& yshape)
{
  for(int i0 = 0; i0 < yshape[0]; ++i0) {
    int j0 = i0 * xstr[0];
    int m0 = i0 * ystr[0];
    for(int i1 = 0; i1 < yshape[1]; ++i1) {
      int j1 = j0 + i1 * xstr[1];
      int m1 = m0 + i1 * ystr[1];
      for(int i2 = 0; i2 < yshape[2]; ++i2) {
        int j2 = j1 + i2 * xstr[2];
        int m2 = m1 + i2 * ystr[2];
        for(int i3 = 0; i3 < yshape[3]; ++i3) {
          int j3 = j2 + i3 * xstr[3];
          int m3 = m2 + i3 * ystr[3];
          for(int i4 = 0; i4 < yshape[4]; ++i4) {
            int j4 = j3 + i4 * xstr[4];
            int m4 = m3 + i4 * ystr[4];
            for(int i5 = 0; i5 < yshape[5]; ++i5) {
              int j5 = j4 + i5 * xstr[5];
              int m5 = m4 + i5 * ystr[5];
              for(int i6 = 0; i6 < yshape[6]; ++i6) {
                int j6 = j5 + i6 * xstr[6];
                int m6 = m5 + i6 * ystr[6];
                for(int i7 = 0; i7 < yshape[7]; ++i7) {
                  int j7 = j6 + i7 * xstr[7];
                  int m7 = m6 + i7 * ystr[7];
                  for(int i8 = 0; i8 < yshape[8]; ++i8) {
                    int j8 = j7 + i8 * xstr[8];
                    int m8 = m7 + i8 * ystr[8];
                    for(int i9 = 0; i9 < yshape[9]; ++i9) {
                      int j9 = j8 + i9 * xstr[9];
                      int m9 = m8 + i9 * ystr[9];
                      for(int i10 = 0; i10 < yshape[10]; ++i10) {
                        int j10 = j9 + i10 * xstr[10];
                        int m10 = m9 + i10 * ystr[10];
                        for(int i11 = 0; i11 < yshape[11]; ++i11) {
                          y[m10 + i11] = x[j10 + i11 * xstr[11]];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}


